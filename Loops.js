/*
Цикл — это инструмент программирования, который повторяет набор инструкций до тех пор, пока не будет достигнуто заданное условие, называемое условием остановки . Как программист, вы обнаружите, что постоянно полагаетесь на циклы! Вы услышите общий термин iterate при обращении к циклам; iterate просто означает «повторять».
Когда нам нужно повторно использовать задачу в нашем коде, мы часто объединяем это действие в функцию. Точно так же, когда мы видим, что процесс должен повторяться несколько раз подряд, мы пишем цикл. Циклы позволяют нам создавать эффективный код, который автоматизирует процессы для создания масштабируемых и управляемых программ.
Как показано на диаграмме, циклы итерируют или повторяют действие до тех пор, пока не будет выполнено определенное условие. Когда условие выполнено, цикл останавливается, и компьютер переходит к следующей части программы.Цикл — это инструмент программирования, который повторяет набор инструкций до тех пор, пока не будет достигнуто заданное условие, называемое условием остановки . Как программист, вы обнаружите, что постоянно полагаетесь на циклы! Вы услышите общий термин iterate при обращении к циклам; iterate просто означает «повторять».
Когда нам нужно повторно использовать задачу в нашем коде, мы часто объединяем это действие в функцию. Точно так же, когда мы видим, что процесс должен повторяться несколько раз подряд, мы пишем цикл. Циклы позволяют нам создавать эффективный код, который автоматизирует процессы для создания масштабируемых и управляемых программ.
Как показано на диаграмме, циклы итерируют или повторяют действие до тех пор, пока не будет выполнено определенное условие. Когда условие выполнено, цикл останавливается, и компьютер переходит к следующей части программы.
 */

/*
Цикл For
Вместо того, чтобы писать один и тот же код снова и снова, циклы позволяют нам сказать компьютерам, чтобы они повторяли заданный блок кода самостоятельно. Один из способов дать компьютерам эти инструкции — использовать for цикл .
Типичный for цикл включает в себя переменную итератора , которая обычно появляется во всех трех выражениях. Переменная итератора инициализируется, проверяется на соответствие условию остановки и присваивается новое значение на каждой итерации цикла. Переменные итератора могут иметь любое имя, но лучше всего использовать описательное имя переменной. Цикл for содержит три выражения, разделенные ;скобками:
инициализация запускает цикл и может также использоваться для объявления переменной итератора .
условие остановки — это условие, по которому оценивается переменная итератора: если условие соответствует результату, trueблок кода будет запущен, а если он соответствует — false код остановится.
оператор итерации используется для обновления переменной итератора в каждом цикле.
Синтаксис цикла for выглядит следующим образом:
for (let counter = 0; counter < 4; counter++) {
  console.log(counter);
}
В этом примере вывод будет следующим:
0
1
2
3
Разберем пример:
Инициализация let counter = 0, поэтому цикл начнет отсчет с 0.
Условие остановки counter < 4означает, что цикл будет выполняться до тех пор, пока переменная итератора counter меньше 4.
Оператор итерации counter++. Это означает, что после каждого цикла значение counter будет увеличиваться на 1. Для первой итерации counter будет равно 0, для второй итерации counter будет равно 1 и так далее.
Блок кода, заключенный в фигурные скобки, console.log(counter)будет выполняться до тех пор, пока условие не будет оценено как false. Условие будет ложным, если counter оно больше или равно 4 — момент, когда условие становится ложным, иногда называют условием остановки .
Этот for цикл позволяет писать 0, 1, 2и 3программно.
 */
for (let a = 5;a<=10;a++){
    console.log(a)
}

for (let counter = 3; counter >= 0; counter--){
    console.log(counter);
}

//Перебор массиво с помощью цикла
/*Перебор массивов
for циклы очень удобны для перебора структур данных. Например, мы можем использовать for цикл для выполнения одной и той же операции над каждым элементом массива. Массивы содержат списки данных, таких как имена клиентов или информация о продукте. Представьте, что у нас есть магазин, и мы хотим повысить цену на каждый товар в нашем каталоге. Это может быть много повторяющегося кода, но с помощью цикла for для итерации по массиву мы легко справимся с этой задачей Чтобы перебрать каждый элемент массива, for цикл должен использовать свойство массива .length в его условии.
 Посмотрите пример ниже, чтобы увидеть, как for циклы повторяются в массивах:
const animals = ['Grizzly Bear', 'Sloth', 'Sea Lion'];
for (let i = 0; i < animals.length; i++){
  console.log(animals[i]);
}
Этот пример даст вам следующий вывод:
Grizzly Bear
Sloth
Sea Lion
В приведенном выше цикле мы назвали нашу переменную итератора i. Это соглашение об именах переменных, которое вы увидите во многих циклах. Когда мы используем i для перебора массивов, мы можем думать об этом как о сокращении слова индекс . Обратите внимание, как наше условие остановки проверяет, что i меньше чем animals.length. Помните, что массивы имеют нулевой индекс, индекс последнего элемента массива эквивалентен длине этого массива минус 1. Если мы попытаемся получить доступ к элементу по индексу, мы зайдем слишком animals.length далеко!
С for циклами нам проще работать с элементами в массивах.
 */

 /*
 Напишите for цикл, который перебирает наш vacationSpot массив, используя iв качестве переменной итератора.
Внутри блока цикла for используйте console.log()для регистрации каждого элемента в vacationSpots массиве после строки 'I would love to visit '. Например, первый раунд цикла должен выводиться 'I would love to visit Bali'  на консоль.
  */
const vacationSpots = ['Bali', 'Paris', 'Tulum'];
for (let i=0; i< vacationSpots.length; i++){
    console.log('I would love to visit '+vacationSpots[i])
}

/*
Вложенные циклы
Когда у нас есть цикл, работающий внутри другого цикла, мы называем это вложенным циклом . Одно из применений вложенного for цикла — сравнение элементов двух массивов. Для каждого раунда внешнего for цикла внутренний for цикл будет выполняться полностью.
Рассмотрим пример вложенного for цикла:
const myArray = [6, 19, 20];
const yourArray = [19, 81, 2];
for (let i = 0; i < myArray.length; i++) {
  for (let j = 0; j < yourArray.length; j++) {
    if (myArray[i] === yourArray[j]) {
      console.log('Both arrays have the number: ' + yourArray[j]);
    }
  }
}
Давайте подумаем, что происходит во вложенном цикле в нашем примере. Для каждого элемента внешнего массива циклов myArray внутренний цикл будет выполняться полностью, сравнивая текущий элемент внешнего массива myArray[i]с каждым элементом внутреннего массива yourArray[j]. Когда он находит совпадение, он выводит строку на консоль.
Теперь ваша очередь написать вложенный цикл!
Примечание. Чтобы выйти из бесконечного цикла в упражнении, обновите страницу , а затем исправьте код для вашего цикла(ов).
 */

/*
Представьте, что вы крупный программист для платформы социальных сетей! Вам было поручено создать прототип программы взаимных подписчиков. Вам понадобятся два массива «друзей» от двух фиктивных пользователей, чтобы вы могли извлечь имена подписчиков, которые существуют в обоих списках. Создайте переменную с именем bobsFollowers и установите ее равной массиву с четырьмя строками, представляющими имена друзей Боба.
 */

