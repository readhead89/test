/*
Логические операторы
Работа с условными выражениями означает, что мы будем использовать логические значения true или false значения. В JavaScript есть операторы, работающие с булевыми значениями, известные как логические операторы . Мы можем использовать логические операторы, чтобы добавить более сложную логику к нашим условным выражениям. Есть три логических оператора:
оператор и ( &&)
оператор или ( ||)
оператор not , также известный как оператор взрыва! ( )
Когда мы используем &&оператор, мы проверяем, что две вещи true:
if (stopLight === 'green' && pedestrians === 0) {
  console.log('Go!');
} else {
  console.log('Stop');
}
При использовании &&оператора оба условия должны оцениваться, true чтобы все условие оценивалось true и выполнялось. В противном случае, если какое-либо из условий равно false, &&условие будет оценено как false, и else блок будет выполнен.
Если нас интересует только одно из условий true, мы можем использовать ||оператор:
if (day === 'Saturday' || day === 'Sunday') {
  console.log('Enjoy the weekend!');
} else {
  console.log('Do some work.');
}
При использовании ||оператора только одно из условий должно оцениваться как , true чтобы общий оператор оценивался как true. В приведенном выше примере кода, если любой day === 'Saturday' или day === 'Sunday' оценивается как true условие if, будет оцениваться как true и его кодовый блок будет выполняться. Если первое условие в ||операторе оценивается как true, второе условие даже не будет проверяться. Только если day === 'Saturday' оценивается false будет day === 'Sunday' оцениваться. Код в else операторе выше будет выполняться только в том случае, если оба сравнения оцениваются как false.
Оператор ! not инвертирует или инвертирует значение логического значения:
let excited = true;
console.log(!excited); // Prints false
let sleepy = false;
console.log(!sleepy); // Prints true
По сути, !оператор либо принимает true значение и передает его обратно false, либо принимает false значение и передает обратно true.
Логические операторы часто используются в условных операторах, чтобы добавить еще один уровень логики в наш код.
В main.js есть две переменные mood и tirednessLevel.
Давайте создадим if...else оператор, который проверяет, mood является ли 'sleepy' он tirednessLevel больше чем 8.
Если оба условия оцениваются как true, то console.log()строка 'time to sleep'. В противном случае мы должны console.log() 'not bed time yet'.
После того, как вы нажмете «Выполнить», поиграйтесь с ||оператором и !оператором! Что произойдет, если вы отмените значение всего оператора с помощью !и переключитесь на ||вместо &&?
 */
let mood = 'sleepy';
let tirednessLevel = 6;
if (mood === 'sleepy' && tirednessLevel > 8){
    console.log ('time to sleep')
}
else {
    console.log ('not bed time yet')
}

/*
Правда и ложь
Давайте рассмотрим, как нелогические типы данных, такие как строки или числа, оцениваются при проверке внутри условия.
Иногда вам нужно проверить, существует ли переменная, и вам не обязательно, чтобы она равнялась определенному значению — вы только проверите, присвоено ли переменной значение.
Вот пример:
let myVariable = 'I Exist!';
if (myVariable) {
   console.log(myVariable)
} else {
   console.log('The variable does not exist.')
}
Блок кода в if операторе будет выполняться, потому что myVariable имеет истинное значение; даже несмотря на то, что значение myVariable явно не является значением true, при использовании в логическом или условном контексте оно оценивается как , true потому что ему было присвоено неложное значение.
Итак, какие значения являются ложными — или оцениваются false при проверке как условие? В список ложных значений входят:
0
Пустые строки, такие как ""или''
null которые представляют, когда нет никакой ценности вообще
undefined которые представляют, когда объявленная переменная не имеет значения
NaN, или Не число
Вот пример с цифрами:
let numberOfApples = 0;
if (numberOfApples){
   console.log('Let us eat apples!');
} else {
   console.log('No apples left!');
}
// Prints 'No apples left!'
Условие оценивается как , потому что false значение . Поскольку это ложное значение, блок кода в операторе будет запущен.numberOfApples00else
Измените значение wordCount так, чтобы оно было правдивым. Это значение по-прежнему должно быть числом.
После того, как вы внесете это изменение и запустите свой код, 'Great! You've started your work!'вы должны войти в консоль.
Измените значение favoritePhrase так, чтобы это была строка, но ложная.
После того, как вы внесете это изменение и запустите свой код, 'This string is definitely empty.'вы должны войти в консоль.
 */
let wordCount = 777;
if (wordCount) {
    console.log("Great! You've started your work!");
} else {
    console.log('Better get to work!');
}
let favoritePhrase = '';
if (favoritePhrase) {
    console.log("This string doesn't seem to be empty.");
} else {
    console.log('This string is definitely empty.');
}

/*
Истинное и ложное назначение
Правдивые и ложные оценки открывают целый мир возможностей для краткости!
Скажем, у вас есть веб-сайт, и вы хотите использовать имя пользователя для персонализированного приветствия. Иногда у пользователя нет учетной записи, что делает username переменную ложной. В приведенном ниже коде проверяется, username определено ли это, и присваивается строка по умолчанию, если это не так:
let username = '';
let defaultName;

if (username) {
  defaultName = username;
} else {
  defaultName = 'Stranger';
}
console.log(defaultName); // Prints: Stranger
Если вы объедините свои знания логических операторов, вы можете использовать сокращение для приведенного выше кода. В логическом условии JavaScript присваивает истинное значение переменной, если вы используете оператор ||в своем назначении:
let username = '';
let defaultName = username || 'Stranger';
console.log(defaultName); // Prints: Stranger
Поскольку ||операторы or сначала проверяют левое условие, переменной defaultName будет присвоено фактическое значение, username если оно истинно, и ей будет присвоено значение, 'Stranger' если username оно ложно. Эта концепция также называется оценкой короткого замыкания .
Давайте используем оценку короткого замыкания, чтобы присвоить значение writingUtensil. Пока не редактируйте tool, мы вернемся tool к следующему шагу.
Присвоить writingUtensil значение tool и, если tool ложно, присвоить значение по умолчанию 'pen'.
Обратите внимание, что текст 'The pen is mightier than the sword' записывается в консоль. Это означает, что значение writingUtensil равно 'pen'.
toolЧто , если мы переназначим значение 'marker'. Посмотрим, что произойдет со значением writingUtensil
 */
let tool = 'marker';
// Use short circuit evaluation to assign  writingUtensil variable below:
let writingUtensil = tool || 'pen'
console.log(`The ${writingUtensil} is mightier than the sword.`);