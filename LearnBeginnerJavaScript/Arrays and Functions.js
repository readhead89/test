/*
Массивы и функции
На протяжении всего урока мы рассматривали массивы как изменяемые или изменяемые. Что произойдет, если мы попытаемся изменить массив внутри функции? Сохраняет ли массив изменения после вызова функции или он находится внутри функции?
Взгляните на следующий пример, где мы вызываем .push() массив внутри функции. Напомним, .push() метод мутирует или изменяет массив:
const flowers = ['peony', 'daffodil', 'marigold'];
function addFlower(arr) {
  arr.push('lily');
}
addFlower(flowers);
console.log(flowers); // Output: ['peony', 'daffodil', 'marigold', 'lily']
Давайте рассмотрим, что произошло в примере:
Массив flowers, содержащий 3 элемента.
Функция addFlower()имеет параметр arr использования .push()для добавления 'lily' элемента в arr.
Мы вызываем addFlower()с аргументом, flowers который будет выполнять код внутри addFlower.
Мы проверяем значение, flowers и теперь оно включает 'lily' элемент! Массив был мутирован!
Таким образом, когда вы передаете массив в функцию, если массив изменяется внутри функции, это изменение будет сохраняться и за пределами функции. Вы также можете увидеть, что эта концепция объясняется как передача по ссылке, поскольку то, что мы фактически передаем функции, является ссылкой на то, где хранится переменная память и изменяется память.
 */
const concept = ['arrays', 'can', 'be', 'mutated'];
function changeArr(arr){
    arr[3] = 'MUTATED';
}
changeArr(concept);
console.log (concept)
const removeElement = (newArr)=>{
    newArr.concept.pop(3)
}
/*
Вложенные массивы
Ранее мы упоминали, что массивы могут хранить другие массивы. Когда массив содержит другой массив, он называется вложенным массивом . Изучите пример ниже:
const nestedArr = [[1], [2, 3]];
Чтобы получить доступ к вложенным массивам, мы можем использовать обозначение скобок со значением индекса, точно так же, как мы делали это для доступа к любому другому элементу:
const nestedArr = [[1], [2, 3]];
console.log(nestedArr[1]); // Output: [2, 3]
Обратите внимание, что nestedArr[1] будет захвачен элемент в индексе 1, который является массивом [2, 3]. Затем, если мы хотим получить доступ к элементам внутри вложенного массива, мы можем связать или добавить дополнительные обозначения скобок со значениями индекса.
const nestedArr = [[1], [2, 3]];
console.log(nestedArr[1]); // Output: [2, 3]
console.log(nestedArr[1][0]); // Output: 2
Во втором console.log() утверждении у нас есть две скобки, связанные с nestedArr. Мы знаем, что nestedArr[1]это массив [2, 3]. Затем, чтобы получить первый элемент из этого массива, мы используем nestedArr[1][0] и получаем значение 2.
 */
//Обратиться к  цифре 6 в массиве
const numberClusters =[[1,2],[3,4],[5,6]]
const target = numberClusters[2][1]
/*
Хорошая работа! В этом уроке мы изучили следующие понятия, касающиеся массивов:
Массивы — это списки, которые хранят данные в JavaScript.
Массивы создаются с помощью скобок [].
Каждый элемент внутри массива находится в пронумерованной позиции или индексе, начиная с 0.
Мы можем получить доступ к одному элементу в массиве, используя его индекс, с таким синтаксисом: myArray[0].
Мы также можем изменить элемент в массиве, используя его индекс, используя синтаксис вроде myArray[0] = 'new string';
У массивов есть length свойство, которое позволяет вам увидеть, сколько элементов содержится в массиве.
Массивы имеют свои собственные методы, в том числе .push()и .pop(), которые соответственно добавляют и удаляют элементы из массива.
Массивы имеют множество методов, выполняющих различные задачи, например .slice()и .shift(), документацию по которым можно найти на веб-сайте Mozilla Developer Network .
Некоторые встроенные методы изменяются, то есть метод изменяет массив, а другие не изменяются. Вы всегда можете проверить документацию.
Переменные, содержащие массивы, могут быть объявлены с помощью let или const. Даже при объявлении с помощью const массивы остаются изменяемыми. Однако переменная, объявленная с помощью, const не может быть переназначена.
Массивы, измененные внутри функции, сохранят это изменение даже вне функции.
Массивы могут быть вложены в другие массивы.
Для доступа к элементам во вложенных массивах цепные индексы используются в квадратных скобках.
Изучение того, как работать с массивами и манипулировать ими, поможет вам работать с фрагментами данных!
 */