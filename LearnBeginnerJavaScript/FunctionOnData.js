/*
Функции JavaScript ведут себя как любой другой тип данных в языке; мы можем назначать функции переменным, и мы можем переназначать их новым переменным.
Ниже у нас есть раздражающе длинное имя функции, которое ухудшает читабельность любого кода, в котором оно используется. Примечание. Если синтаксис приведенной ниже функции кажется вам незнакомым, повторите упражнение с функциями стрелок , чтобы освежить свои знания о стрелочных обозначениях ES6.
const announceThatIAmDoingImportantWork = () => {
    console.log("I’m doing very important work!");
};
Давайте представим, что эта функция выполняет важную работу и ее нужно вызывать неоднократно. Чтобы переименовать эту функцию без ущерба для исходного кода, мы можем переназначить функцию переменной с подходящим коротким именем:
const busy = announceThatIAmDoingImportantWork;
busy(); // This function call barely takes any space!
busy— это переменная, которая содержит ссылку на нашу исходную функцию. Если бы мы могли найти адрес в памяти busy и адрес в памяти, announceThatIAmDoingImportantWork они указывали бы на одно и то же место. Наша новая busy()функция может быть вызвана с помощью круглых скобок, как если бы это было имя, которое мы изначально дали нашей функции.
Обратите внимание, как мы announceThatIAmDoingImportantWork без скобок присваиваем значение переменной busy. Мы хотим присвоить значение самой функции, а не значение, которое она возвращает при вызове.
В JavaScript функции являются объектами первого класса . Это означает, что, как и другие объекты, с которыми вы сталкивались, функции JavaScript могут иметь свойства и методы.
Поскольку функции являются типом объекта, они имеют такие свойства, как .length и .name, и такие методы, как .toString(). Подробнее о методах и свойствах функций можно посмотреть в документации .
Функции особенные, потому что мы можем вызывать их, но при этом мы можем обращаться с ними как с любым другим типом данных. Давайте попрактикуемся в этом!
 */

const checkThatTwoPlusTwoEqualsFourAMillionTimes = () => {
    for(let i = 1; i <= 1000000; i++) {
        if ( (2 + 2) !== 4) {
            console.log('Something has gone very wrong :( ');
        }
    }
};

const isTwoPlusTwo = checkThatTwoPlusTwoEqualsFourAMillionTimes
isTwoPlusTwo()
console.log(isTwoPlusTwo.name)
