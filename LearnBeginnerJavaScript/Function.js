/*
Объявления функций
В JavaScript есть много способов создать функцию . Одним из способов создания функции является использование объявления функции . Подобно тому, как объявление переменной связывает значение с именем переменной, объявление функции связывает функцию с именем или идентификатором . Взгляните на анатомию объявления функции ниже:
Диаграмма, показывающая синтаксис объявления функции
Объявление функции состоит из:
Ключевое function слово.
Имя функции или ее идентификатор, за которым следуют круглые скобки.
Тело функции или блок операторов, необходимых для выполнения определенной задачи, заключенный в фигурные скобки функции, { }.
Объявление функции — это функция, привязанная к идентификатору или имени. В следующем упражнении мы рассмотрим, как запустить код внутри тела функции.
Мы также должны знать о функции подъема в JavaScript, которая позволяет получить доступ к объявлениям функций до того, как они будут определены.
Взгляните на пример подъема:
greetWorld(); // Output: Hello, World!
function greetWorld() {
  console.log('Hello, World!');
}
Обратите внимание, что подъем можно было greetWorld()вызывать до того, как greetWorld()функция была определена! Поскольку подъем не считается хорошей практикой, мы просто хотим, чтобы вы знали об этой функции.
Если вы хотите узнать больше о подъеме, ознакомьтесь с документацией MDN по подъему .
Давайте создадим функцию, которая выводит напоминание в консоль. Используя объявление функции, создайте функцию с именем getReminder().
В теле функции getReminder()выведите на консоль следующее напоминание:'Water the plants.'
Давайте создадим еще одну функцию, которая выводит на консоль полезную испанскую туристическую фразу.
Используя объявление функции, создайте функцию с именем greetInSpanish().
Добавьте код в тело функции greetInSpanish():
В теле функции console.log()следующая испанская фраза в консоль:'Buenas tardes.'
 */
function getReminder() {
    console.log ('Water the plants.')
}
function greetInSpanish() {
    console.log('Buenas tardes.')
}
/*
Вызов функции
Как мы видели в предыдущих упражнениях, объявление функции связывает функцию с идентификатором.
Однако объявление функции не требует запуска кода внутри тела функции, оно просто объявляет о существовании функции. Код внутри тела функции запускается или выполняется только при вызове функции .
Чтобы вызвать функцию в вашем коде, вы вводите имя функции, за которым следуют круглые скобки.
Диаграмма, показывающая синтаксис вызова функции
Этот вызов функции выполняет тело функции или все операторы, заключенные в фигурные скобки в объявлении функции.Диаграмма выполнения функций
Мы можем вызывать одну и ту же функцию столько раз, сколько необходимо.
Давайте попрактикуемся в вызове функций в нашем коде.
Представьте, что вы управляете интернет-магазином. Когда клиент размещает заказ, вы отправляете ему благодарственное письмо. Давайте создадим функцию для выполнения этой задачи:
Определите функцию, вызываемую sayThanks()как объявление функции.
В теле функции sayThanks()добавьте код, чтобы при вызове функция выводила на консоль следующее благодарственное сообщение: 'Thank you for your purchase! We appreciate your business.'
Позвоните sayThanks() , чтобы просмотреть сообщение с благодарностью в консоли.
Функции можно вызывать столько раз, сколько вам нужно.
Представьте, что три клиента разместили заказ, и вы хотите отправить каждому из них сообщение с благодарностью. Обновите свой код, чтобы он звонил sayThanks()три раза.
 */
function sayThanks (){
    console.log('Thank you for your purchase! We appreciate your business.')
}
sayThanks()
sayThanks()
sayThanks()

/*
Параметры и аргументы
Пока что созданные нами функции выполняют задачу без ввода. Однако некоторые функции могут принимать входные данные и использовать их для выполнения задачи. При объявлении функции мы можем указать ее параметры . Параметры позволяют функциям принимать входные данные и выполнять задачу с использованием входных данных. Мы используем параметры в качестве заполнителей для информации, которая будет передана функции при ее вызове.
Давайте посмотрим, как указать параметры в объявлении нашей функции:
Синтаксис JavaScript для объявления функции с параметрами
На приведенной выше диаграмме calculateArea(), вычисляет площадь прямоугольника на основе двух входных данных width и height. Параметры указываются в скобках как width и height, а внутри тела функции действуют как обычные переменные. width и height выступать в качестве заполнителей для значений, которые будут перемножаться.
При вызове функции с параметрами мы указываем значения в скобках, следующих за именем функции. Значения, которые передаются функции при ее вызове, называются аргументами . Аргументы могут быть переданы в функцию как значения или переменные.
Синтаксис JavaScript для вызова функции с аргументами в качестве значений
В приведенном выше вызове функции число 10передается как width и 6передается как height. Обратите внимание, что порядок передачи и назначения аргументов соответствует порядку объявления параметров.
Синтаксис JavaScript для вызова функции с аргументами в качестве переменных
Переменные rectWidth и rectHeight инициализируются значениями высоты и ширины прямоугольника перед использованием в вызове функции.
Используя параметры, calculateArea()можно повторно использовать для вычисления площади любого прямоугольника! Функции — мощный инструмент компьютерного программирования, поэтому давайте попрактикуемся в создании и вызове функций с параметрами.
Функция sayThanks()работает хорошо, но давайте добавим имя клиента в сообщение.
Добавьте параметр, вызываемый name в объявление функции для sayThanks().
В name качестве параметра его можно использовать как переменную в теле функции sayThanks().
Используя name и конкатенацию строк, измените сообщение с благодарностью на следующее:
'Thank you for your purchase '+ name + '! We appreciate your business.'
Скопируйте и вставьте приведенное выше сообщение в свой код.
Клиент по имени Коул только что купил что-то в вашем интернет-магазине. Позвоните sayThanks()и передайте 'Cole' в качестве аргумента, чтобы отправить Коулу персональное сообщение с благодарностью.
 */
function sayThank(name) {
    console.log(`Thank you for your purchase ${name}! We appreciate your business.`);
}
sayThank('Cole')
sayThank('Pol')

/*
Параметры по умолчанию
Одной из функций, добавленных в ES6, является возможность использовать параметры по умолчанию . Параметры по умолчанию позволяют параметрам иметь предопределенное значение в случае, если в функцию не передается аргумент или если аргумент вызывается undefined.
Взгляните на приведенный ниже фрагмент кода, в котором используется параметр по умолчанию:
function greeting (name = 'stranger') {
  console.log(`Hello, ${name}!`)
}
greeting('Nick') // Output: Hello, Nick!
greeting() // Output: Hello, stranger!
В приведенном выше примере мы использовали =оператор, чтобы присвоить параметру name значение по умолчанию 'stranger'. Это полезно иметь на случай, если мы когда-нибудь захотим включить неперсонализированное приветствие по умолчанию!
Когда код вызывает, greeting('Nick')значение аргумента передается и 'Nick', переопределяет параметр по умолчанию для 'stranger' входа 'Hello, Nick!'в консоль.
Если аргумент не передается , используется greeting()значение по умолчанию и регистрируется на консоли.'stranger''Hello, stranger!'
Используя параметр по умолчанию, мы учитываем ситуации, когда аргумент не передается в функцию, ожидающую аргумент.
Давайте попрактикуемся в создании функций, использующих параметры по умолчанию.

Функция makeShoppingList()создает список покупок на основе элементов, которые передаются функции в качестве аргументов.
Представьте, что вы всегда покупаете молоко, хлеб и яйца каждый раз, когда идете за продуктами. Чтобы упростить создание списка продуктов, присвоим значения по умолчанию параметрам в makeShoppingList().
Измените параметры на makeShoppingList()параметры по умолчанию:
Назначьте «молоко» значением по умолчанию для item1.
Назначьте «хлеб» в качестве значения по умолчанию для item2.
Назначьте «яйца» значением по умолчанию для item3.
 */
function makeShoppingList(item1 = 'milk', item2 = 'bread', item3= 'eggs'){
    console.log(`Remember to buy ${item1}`);
    console.log(`Remember to buy ${item2}`);
    console.log(`Remember to buy ${item3}`);
}
makeShoppingList()
makeShoppingList('corn' , 're', 1)
