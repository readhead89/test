//Math.random() случайное число
//Math.floor() случайное целое число
//Math.floor() округление
console.log (Math.random()*100)
console.log (Math.floor(Math.random()*100))

//Математические операторы
let levelUp = 10;
let powerLevel = 9001;
let multiplyMe = 32;
let quarterMe = 1152;
// Use the mathematical assignments in the space below:
levelUp +=5
powerLevel -= 100
multiplyMe *= 11
quarterMe /= 4
/*
Оператор увеличения и уменьшения
Другие математические операторы присваивания включают оператор приращения ( ++) и оператор декремента ( --).
Оператор инкремента увеличит значение переменной на 1. Оператор декремента уменьшит значение переменной на 1. Например:
let a = 10;
a++;
console.log(a); // Output: 11
let b = 20;
b--;
console.log(b); // Output: 19
Как и в случае с предыдущими операторами математического присваивания ( +=, -=, *=, /=), значение переменной обновляется и присваивается как новое значение этой переменной.
 */
let gainedDollar = 3;
let lostDollar = 50;
//Увеличить значение переменной
gainedDollar ++;
//Уменьшить значение переменной
lostDollar --;
/*
Объединение строк с переменными
В предыдущих упражнениях мы присваивали строки переменным. Теперь давайте рассмотрим, как соединить или объединить строки в переменных.
Оператор +можно использовать для объединения двух строковых значений, даже если эти значения хранятся в переменных:
let myPet = 'armadillo';
console.log('I own a pet ' + myPet + '.');
// Output: 'I own a pet armadillo.'
В приведенном выше примере мы присвоили значение 'armadillo' переменной myPet. Во второй строке +оператор используется для объединения трех строк: 'I own a pet', значение, сохраненное в myPet, и '.'. Мы записываем результат этой конкатенации в консоль как:
I own a pet armadillo.
 */
const favoriteAnimal = 'Dog'
console.log('My favorite animal: '+ favoriteAnimal)
/*
Интерполяция строк
В версии JavaScript для ES6 мы можем вставлять или интерполировать переменные в строки, используя литералы шаблонов . Посмотрите следующий пример, где литерал шаблона используется для записи строк вместе:
const myPet = 'armadillo';
console.log(`I own a pet ${myPet}.`);
// Output: I own a pet armadillo.
Заметить, что:
литерал шаблона обернут обратными кавычками `(эта клавиша обычно находится в верхней части клавиатуры слева от 1клавиши).
Внутри литерала шаблона вы увидите заполнитель ${myPet}. Значение myPet вставляется в литерал шаблона.
Когда мы интерполируем `I own a pet ${myPet}.`, вывод, который мы печатаем, представляет собой строку:'I own a pet armadillo.'
Одним из самых больших преимуществ использования литералов шаблонов является удобочитаемость кода. Используя литералы шаблонов, вы можете легко определить, какой будет новая строка. Вам также не нужно беспокоиться об экранировании двойных или одинарных кавычек.
 */
const myName = 'Dr. House';
const myCity = 'Norilsk';
console.log(`My name is ${myName}. My favorite city is ${myCity}.`)


