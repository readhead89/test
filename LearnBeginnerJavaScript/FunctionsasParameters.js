/*
Функции как параметры
Как вы знаете, параметр — это заполнитель для данных, которые передаются в функцию. Поскольку функции могут вести себя как данные любого другого типа в JavaScript, возможно, вас не удивит, что функции могут принимать другие функции в качестве параметров. Функция высшего порядка — это функция, которая либо принимает функции в качестве параметров, либо возвращает функцию, либо и то, и другое! Мы вызываем функции, которые передаются в качестве параметров функции обратного вызова . Функции обратного вызова вызываются во время выполнения функции более высокого порядка.
Когда мы вызываем функцию более высокого порядка и передаем другую функцию в качестве аргумента, мы не вызываем функцию-аргумент. Его вызов будет оцениваться как передача возвращаемого значения этого вызова функции. С функциями обратного вызова мы передаем саму функцию, вводя имя функции без круглых скобок:
const higherOrderFunc = param => {
  param();
  return `I just invoked ${param.name} as a callback function!`
}
const anotherFunc = () => {
  return 'I\'m being invoked by the higher-order function!';
}
higherOrderFunc(anotherFunc);
Мы написали функцию высшего порядка higherOrderFunc, которая принимает единственный параметр param. Внутри тела param вызывается с помощью круглых скобок. И, наконец, возвращается строка, сообщающая нам имя переданной функции обратного вызова.
Ниже функции высшего порядка находится еще одна функция с метким названием anotherFunc. Эта функция стремится быть вызванной внутри функции более высокого порядка.
Наконец, мы вызываем higherOrderFunc(), передавая ее в anotherFunc качестве аргумента, тем самым исполняя ее мечты о вызове функцией более высокого порядка.
higherOrderFunc(() => {
  for (let i = 0; i <= 10; i++){
    console.log(i);
  }
});
В этом примере мы вызывали higherOrderFunc()анонимную функцию (функцию без имени), которая считает до 10. Анонимные функции тоже могут быть аргументами!
Давайте немного попрактикуемся в написании функций высшего порядка.
 */
const addTwo = num => {
    return num + 2;
}
const checkConsistentOutput = (func, val) => {
    let checkA = val + 2
    let checkB = func(val)
    if (checkA ===checkB){
        return func(val)
    } else {
        return 'inconsistent results'
    }
}
console.log(checkConsistentOutput(addTwo,-5));
